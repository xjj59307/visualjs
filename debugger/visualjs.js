module.exports = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = null,
        peg$c1 = function(program) { return program; },
        peg$c2 = function(pattern, actions) {
            return {
              type: 'program',
              pattern: pattern,
              actions: actions
            };
          },
        peg$c3 = "",
        peg$c4 = function(name) { return name; },
        peg$c5 = [],
        peg$c6 = function(start, parts) {
            return start + parts.join('');
          },
        peg$c7 = /^[A-Za-z]/,
        peg$c8 = "[A-Za-z]",
        peg$c9 = /^[0-9]/,
        peg$c10 = "[0-9]",
        peg$c11 = "pattern",
        peg$c12 = "\"pattern\"",
        peg$c13 = "action",
        peg$c14 = "\"action\"",
        peg$c15 = "create",
        peg$c16 = "\"create\"",
        peg$c17 = "next",
        peg$c18 = "\"next\"",
        peg$c19 = "exec",
        peg$c20 = "\"exec\"",
        peg$c21 = "when",
        peg$c22 = "\"when\"",
        peg$c23 = /^[ \t\n\r]/,
        peg$c24 = "[ \\t\\n\\r]",
        peg$c25 = ":",
        peg$c26 = "\":\"",
        peg$c27 = "{",
        peg$c28 = "\"{\"",
        peg$c29 = "}",
        peg$c30 = "\"}\"",
        peg$c31 = function(name, exec_clauses) {
            return {
              type: 'pattern',
              name: name,
              exec_clauses: exec_clauses
            };
          },
        peg$c32 = ",",
        peg$c33 = "\",\"",
        peg$c34 = function(head, tail) {
            return tail.reduce(function(previous, current) {
              previous.push(current[3]);
              return previous;
            }, [head]);
          },
        peg$c35 = function(name, condition) {
            return {
              type: 'exec_clause',
              name: name,
              condition: condition 
            };
          },
        peg$c36 = /^[^,)]/,
        peg$c37 = "[^,)]",
        peg$c38 = function(code) {
            return {
              type: 'when_clause',
              code: code.substr(1, code.length - 2)
            };
          },
        peg$c39 = "(",
        peg$c40 = "\"(\"",
        peg$c41 = ")",
        peg$c42 = "\")\"",
        peg$c43 = /^[^()]/,
        peg$c44 = "[^()]",
        peg$c45 = function(head, tail) {
            return tail.reduce(function(previous, current) {
              previous.push(current[1]);
              return previous;
            }, [head]);
          },
        peg$c46 = function(name, action_clauses) {
            return {
              type: 'action',
              name: name,
              action_clauses: action_clauses
            };
          },
        peg$c47 = function(head, tail) {
            return tail.reduce(function(previous, current) {
              previous.push(current[3]);
              return previous;
            }, [head]); 
          },
        peg$c48 = function(node, attributes) {
            return {
              type: 'create_clause',
              node: node,
              attributes: attributes 
            };
          },
        peg$c49 = "=",
        peg$c50 = "\"=\"",
        peg$c51 = function(name, node_type) {
            return {
              type: 'node_assignment_expression',    
              name: name,
              node_type: node_type
            };
          },
        peg$c52 = function(name, value) {
            return {
              type: 'assignment_expression',
              name: name,
              value: value.join('')
            };
          },
        peg$c53 = function(object, environment) {
            // Termintor of last line is \n.
            if (object[object.length - 1] === '\n')
              object.length -= 1;
            return {
              type: 'next_clause',
              object: object.join(''),
              environment: environment
            };
          },
        peg$c54 = /^[^(]/,
        peg$c55 = "[^(]",
        peg$c56 = "tree_node",
        peg$c57 = "\"tree_node\"",
        peg$c58 = "tree_edge",
        peg$c59 = "\"tree_edge\"",
        peg$c60 = function(node) {
            return node;
          },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parsestart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== null) {
        s2 = peg$parseprogram();
        if (s2 !== null) {
          s3 = peg$parse__();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c1(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseprogram() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepattern();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s3 = peg$parseactions();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c2(s1, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsereserved_word();
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c3;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$parseidentifier_name();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c4(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidentifier_name() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseidentifier_start();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseidentifier_part();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseidentifier_part();
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c6(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidentifier_start() {
      var s0;

      if (peg$c7.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }

      return s0;
    }

    function peg$parseidentifier_part() {
      var s0;

      s0 = peg$parseidentifier_start();
      if (s0 === null) {
        if (peg$c9.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
      }

      return s0;
    }

    function peg$parsereserved_word() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepattern_token();
      if (s1 === null) {
        s1 = peg$parseaction_token();
        if (s1 === null) {
          s1 = peg$parsecreate_token();
          if (s1 === null) {
            s1 = peg$parsenext_token();
            if (s1 === null) {
              s1 = peg$parseexec_token();
              if (s1 === null) {
                s1 = peg$parsewhen_token();
              }
            }
          }
        }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifier_part();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepattern_token() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c11) {
        s1 = peg$c11;
        peg$currPos += 7;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifier_part();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaction_token() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 6;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifier_part();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreate_token() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c15) {
        s1 = peg$c15;
        peg$currPos += 6;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifier_part();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenext_token() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c17) {
        s1 = peg$c17;
        peg$currPos += 4;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifier_part();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexec_token() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 4;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifier_part();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewhen_token() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 4;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifier_part();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      if (peg$c23.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      while (s1 !== null) {
        s0.push(s1);
        if (peg$c23.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
      }

      return s0;
    }

    function peg$parsepattern() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c25;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s3 !== null) {
            s4 = peg$parse__();
            if (s4 !== null) {
              s5 = peg$parsepattern_token();
              if (s5 !== null) {
                s6 = peg$parse__();
                if (s6 !== null) {
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s7 = peg$c27;
                    peg$currPos++;
                  } else {
                    s7 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                  }
                  if (s7 !== null) {
                    s8 = peg$parse__();
                    if (s8 !== null) {
                      s9 = peg$parseexec_clauses();
                      if (s9 !== null) {
                        s10 = peg$parse__();
                        if (s10 !== null) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s11 = peg$c29;
                            peg$currPos++;
                          } else {
                            s11 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c30); }
                          }
                          if (s11 !== null) {
                            peg$reportedPos = s0;
                            s1 = peg$c31(s1, s9);
                            if (s1 === null) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexec_clauses() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseexec_clause();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== null) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c32;
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s5 !== null) {
            s6 = peg$parse__();
            if (s6 !== null) {
              s7 = peg$parseexec_clause();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== null) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c32;
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s5 !== null) {
              s6 = peg$parse__();
              if (s6 !== null) {
                s7 = peg$parseexec_clause();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c34(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexec_clause() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexec_token();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s3 = peg$parseidentifier();
          if (s3 !== null) {
            s4 = peg$parse__();
            if (s4 !== null) {
              s5 = peg$parsewhen_clause();
              if (s5 === null) {
                s5 = peg$c3;
              }
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c35(s3, s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenon_assignment_terminator() {
      var s0;

      if (peg$c36.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }

      return s0;
    }

    function peg$parsewhen_clause() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsewhen_token();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s3 = peg$parsebraced();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c38(s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebraced() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c39;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s2 !== null) {
        s3 = [];
        s4 = peg$parsebraced();
        if (s4 === null) {
          s4 = peg$parsenon_parenthesis();
        }
        while (s4 !== null) {
          s3.push(s4);
          s4 = peg$parsebraced();
          if (s4 === null) {
            s4 = peg$parsenon_parenthesis();
          }
        }
        if (s3 !== null) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c41;
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s4 !== null) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenon_parenthesis() {
      var s0, s1;

      s0 = [];
      if (peg$c43.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 !== null) {
        while (s1 !== null) {
          s0.push(s1);
          if (peg$c43.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseactions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseaction();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== null) {
          s5 = peg$parseaction();
          if (s5 !== null) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== null) {
            s5 = peg$parseaction();
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c45(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c25;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s3 !== null) {
            s4 = peg$parse__();
            if (s4 !== null) {
              s5 = peg$parseaction_token();
              if (s5 !== null) {
                s6 = peg$parse__();
                if (s6 !== null) {
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s7 = peg$c27;
                    peg$currPos++;
                  } else {
                    s7 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                  }
                  if (s7 !== null) {
                    s8 = peg$parse__();
                    if (s8 !== null) {
                      s9 = peg$parseaction_clauses();
                      if (s9 !== null) {
                        s10 = peg$parse__();
                        if (s10 !== null) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s11 = peg$c29;
                            peg$currPos++;
                          } else {
                            s11 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c30); }
                          }
                          if (s11 !== null) {
                            peg$reportedPos = s0;
                            s1 = peg$c46(s1, s9);
                            if (s1 === null) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaction_clauses() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseaction_clause();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== null) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c32;
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s5 !== null) {
            s6 = peg$parse__();
            if (s6 !== null) {
              s7 = peg$parseaction_clause();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== null) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c32;
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s5 !== null) {
              s6 = peg$parse__();
              if (s6 !== null) {
                s7 = peg$parseaction_clause();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c47(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaction_clause() {
      var s0;

      s0 = peg$parsecreate_clause();
      if (s0 === null) {
        s0 = peg$parsenext_clause();
      }

      return s0;
    }

    function peg$parsecreate_clause() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsecreate_token();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s3 = peg$parsenode_assignment_expression();
          if (s3 === null) {
            s3 = peg$parsenode_type();
          }
          if (s3 !== null) {
            s4 = peg$parse__();
            if (s4 !== null) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c39;
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
              }
              if (s5 !== null) {
                s6 = peg$parse__();
                if (s6 !== null) {
                  s7 = peg$parseassignment_expressions();
                  if (s7 === null) {
                    s7 = peg$c3;
                  }
                  if (s7 !== null) {
                    s8 = peg$parse__();
                    if (s8 !== null) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c41;
                        peg$currPos++;
                      } else {
                        s9 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c42); }
                      }
                      if (s9 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c48(s3, s7);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenode_assignment_expression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c49;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s3 !== null) {
            s4 = peg$parse__();
            if (s4 !== null) {
              s5 = peg$parsenode_type();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c51(s1, s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassignment_expressions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseassignment_expression();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== null) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c32;
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s5 !== null) {
            s6 = peg$parse__();
            if (s6 !== null) {
              s7 = peg$parseassignment_expression();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== null) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c32;
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s5 !== null) {
              s6 = peg$parse__();
              if (s6 !== null) {
                s7 = peg$parseassignment_expression();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c34(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassignment_expression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c49;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s3 !== null) {
            s4 = peg$parse__();
            if (s4 !== null) {
              s5 = [];
              s6 = peg$parsenon_assignment_terminator();
              if (s6 !== null) {
                while (s6 !== null) {
                  s5.push(s6);
                  s6 = peg$parsenon_assignment_terminator();
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c52(s1, s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenext_clause() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsenext_token();
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parsenon_left_parenthesis();
          if (s4 !== null) {
            while (s4 !== null) {
              s3.push(s4);
              s4 = peg$parsenon_left_parenthesis();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== null) {
            s4 = peg$parse__();
            if (s4 !== null) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c39;
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
              }
              if (s5 !== null) {
                s6 = peg$parse__();
                if (s6 !== null) {
                  s7 = peg$parseassignment_expressions();
                  if (s7 === null) {
                    s7 = peg$c3;
                  }
                  if (s7 !== null) {
                    s8 = peg$parse__();
                    if (s8 !== null) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c41;
                        peg$currPos++;
                      } else {
                        s9 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c42); }
                      }
                      if (s9 !== null) {
                        s10 = peg$parse__();
                        if (s10 !== null) {
                          peg$reportedPos = s0;
                          s1 = peg$c53(s3, s7);
                          if (s1 === null) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenon_left_parenthesis() {
      var s0;

      if (peg$c54.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }

      return s0;
    }

    function peg$parsenode_type() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c56) {
        s1 = peg$c56;
        peg$currPos += 9;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s1 === null) {
        if (input.substr(peg$currPos, 9) === peg$c58) {
          s1 = peg$c58;
          peg$currPos += 9;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c59); }
        }
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifier_part();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c60(s1);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
